In this project, you will develop an interpreter for a subset of the Scheme language. As you proceed, think about the issues that arise in the design of a programming language; many quirks of languages are byproducts of implementation decisions in interpreters and compilers. The subset of the language used in this project is described in the functional programming section of Composing Programs, as well as this language specification and built-in procedure reference.


scheme_eval_apply.py: the recursive evaluator for Scheme expressions
scheme_forms.py: evaluation for special forms
scheme_classes.py: classes that describe Scheme expressions
questions.scm: Scheme procedures for you to implement
scheme.py: the interpreter REPL
pair.py: defines the Pair class and the nil object
scheme_builtins.py: built-in Scheme procedures
scheme_reader.py: the reader for Scheme input
scheme_tokens.py: the tokenizer for Scheme input
scheme_utils.py: functions for inspecting Scheme expressions
ucb.py: utility functions for use in 61A projects
tests.scm: a collection of test cases written in Scheme
ok: the autograder
tests: a directory of tests used by ok
mytests.rst: a file where you can add your own tests
